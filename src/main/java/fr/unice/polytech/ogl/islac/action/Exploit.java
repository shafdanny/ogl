package fr.unice.polytech.ogl.islac.action;

import java.util.ArrayList;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import fr.unice.polytech.ogl.islac.data.Arena;
import fr.unice.polytech.ogl.islac.data.Pos;
import fr.unice.polytech.ogl.islac.data.Ressources;
import fr.unice.polytech.ogl.islac.data.Tuils;

public class Exploit extends Action {
	
	String ressourceName;
 
	
	// Méthodes exploit
	// Attention: ressource en majuscule: WOOD
	
	public Exploit()
	{
		this.name = "Exploit";
	}
	
	public Exploit(String name)
	{
		this.ressourceName=name;
	}

	@Override
	public String act(){
		
		
		return "{ \"action\": \"exploit\", \"parameters\": {\""+"resource"+"\": " +"\""+ ressourceName+"\" " +"} }";
	}

	
	/*@Overrides
	public String act(String ressource){
		
		
		return "{ \"action\": \"exploit\", \"parameters\": {\"resource\":\""+ressource+"\" } }";
	}*/
	

	/**
	 * Méthode read de la classe exploit, récupère le nombre de ressource
	 * collecté et le coût en pa.
	 * @param data, act
	 */

	public void read(String data,Action act){
	
		try {
	    	  JSONParser parser=new JSONParser();		  
		      JSONObject obj = (JSONObject)parser.parse(data);
		      JSONObject obj1= (JSONObject)obj.get("extras");

		      
		      long pa=(long)obj.get("cost");
		      long amount=(long)obj1.get("amount");
		      
		      String ressourceName = act.getLastAction().getRessourceName();
		      
		      /**
		       * No resource correspondant found in Character, it means that it is primary resources to be transformed
		       * that is saved in Arena
		       */
		      if(act.getC().getRessource(ressourceName) == null){
		    	  act.getMap().getresourceToBeTransformed(ressourceName).addAmountCollected((int) amount);
		    	  
		    	  if (amount<10 || act.getMap().getresourceToBeTransformed(ressourceName).getQuantityNeeded() <=  act.getMap().getresourceToBeTransformed(ressourceName).getAmountCollected())
			      {
			    	  act.getC().getCurrentTuil().getObjectivesInTile().remove(ressourceName);			    	  
			      }
		      }
		    	  
		      else
		      {
		    	  act.getC().getRessource(ressourceName).addAmountCollected((int)amount);		    
		    		     
			      // ATTENTION : si on remet le if il faut modifier de sorte à que si on finit de récolter un objectif
			      // la valeur de la case actuelle passe à 0.
			      if (amount<10 || act.getC().getRessource(ressourceName).getQuantityNeeded() <= act.getC().getRessource(ressourceName).getAmountCollected())
			      {
			    	  act.getC().getCurrentTuil().getObjectivesInTile().remove(ressourceName);
			    	  
			      }
		      
		      }
		    	 
		      act.getC().addPa(pa);
		      
		      
		} catch (ParseException e) {
			e.printStackTrace();
	}
	
	}

	/**
	 * Méthode getRessourceName, permet d'obtenir le nom d'une ressource.
	 * @return ressourceName
	 */
	
	
	public String getRessourceName() {
		return ressourceName;
	}

	/**
	 * Méthode setRessourceName, permet de donner un nom à une ressource.
	 * @param ressourceName
	 */
	
	public void setRessourceName(String ressourceName) {
		this.ressourceName = ressourceName;
	}
	
}
