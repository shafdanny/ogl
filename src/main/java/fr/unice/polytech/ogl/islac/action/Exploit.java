package fr.unice.polytech.ogl.islac.action;

import java.util.ArrayList;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import fr.unice.polytech.ogl.islac.data.Arena;
import fr.unice.polytech.ogl.islac.data.Pos;
import fr.unice.polytech.ogl.islac.data.Ressources;
import fr.unice.polytech.ogl.islac.data.Tuils;

public class Exploit extends Action {
	
	String ressourceName;
 
	
	// Méthodes exploit
	// Attention: ressource en majuscule: WOOD
	
	public Exploit()
	{
		
	}
	
	public Exploit(String name)
	{
		this.ressourceName=name;
	}

	@Override
	public String act(){
		
		
		return "{ \"action\": \"exploit\", \"parameters\": {\""+"resource"+"\": " +"\""+ ressourceName+"\" " +"} }";
	}

	
	/*@Overrides
	public String act(String ressource){
		
		
		return "{ \"action\": \"exploit\", \"parameters\": {\"resource\":\""+ressource+"\" } }";
	}*/
	

	/**
	 * Méthode read de la classe exploit, récupère le nombre de ressource
	 * collecté et le coût en pa.
	 * @param data, act
	 */

	public void read(String data,Action act){
	
		try {
	    	  JSONParser parser=new JSONParser();		  
		      JSONObject obj = (JSONObject)parser.parse(data);
		      JSONObject obj1= (JSONObject)obj.get("extras");

		      
		      long pa=(long)obj.get("cost");
		      long amount=(long)obj1.get("amount");
		      
		      String ressourceName = act.getLastAction().getRessourceName();
		      act.getC().getRessource(ressourceName).addQuantity((int)amount);
		    
		      act.getC().addPa(pa);
		      
		      if (act.getC().getObj().size()>0)
		      {
		    	  if (act.getC().getObj().get(0).getQuantity()<0)
		    	  {
		    		  act.getMap().setObj1("aa");
		    	  }
		      }
		      
		      if (act.getC().getObj().size()>1)
		      {
		    	  if (act.getC().getObj().get(1).getQuantity()<0)
		    	  {
		    		  act.getMap().setObj2("aa");
		    	  }
		      }
		      
		      if (act.getC().getObj().size()>2)
		      {
		    	  if (act.getC().getObj().get(2).getQuantity()<0)
		    	  {
		    		  act.getMap().setObj3("aa");
		    	  }
		      }
		      
		      if (amount<100)
		      {
		    	  
		    	  
		    	 if(ressourceName.equals(act.getMap().getObj1()))
		    	 {
		    	  	act.getC().getCurrentTuil().setObj1(0);
					act.getC().getCurrentTuil().setObj1(false);
		    	 }
		    	 
		    	 if(ressourceName.equals(act.getMap().getObj2()))
		    	 {
		    	  	act.getC().getCurrentTuil().setObj2(0);
					act.getC().getCurrentTuil().setObj2(false);
		    	 }
		    	 
		    	 if(ressourceName.equals(act.getMap().getObj3()))
		    	 {
		    	  	act.getC().getCurrentTuil().setObj3(0);
					act.getC().getCurrentTuil().setObj3(false);
		    	 }
		      }
		    	  
		    
		      
		      
		} catch (ParseException e) {
			e.printStackTrace();
	}
	
	}

	/**
	 * Méthode getRessourceName, permet d'obtenir le nom d'une ressource.
	 * @return ressourceName
	 */
	
	
	public String getRessourceName() {
		return ressourceName;
	}

	/**
	 * Méthode setRessourceName, permet de donner un nom à une ressource.
	 * @param ressourceName
	 */
	
	public void setRessourceName(String ressourceName) {
		this.ressourceName = ressourceName;
	}
/*
public static void main(String[] args){

	
	// test de act
	Action test= new Exploit();
	test.act("WOOD");
	System.out.println(test.act("WOOD"));

	// test de read
	
	String s = "{\"status\":\"OK\", \"cost\": 37, \"extras\": { \"amount\": 123 } }";
	
	Action test1= new Action();
	test1.initAction();
	Ressources r1 = new Ressources("WOOD", 100);
	Tuils t1=new Tuils(0,0);
	test1.getC().setCurrentTuil(t1);
	test1.setLastAction(new Exploit("WOOD"));
	
	
	System.out.println(test1.getC().getPa());
	System.out.println(test1.getLastAction().getRessourceName());
	//test1.getC().getRessource("WOOD").addQuantity(100);
	
	// soucis avec le addQuantity
	new Exploit().read(s,test1);
		
	}

	*/
	
	
}
